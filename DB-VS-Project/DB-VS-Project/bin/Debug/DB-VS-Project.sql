/*
Deployment script for DB-VS-Project

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DeployTestData "false"
:setvar DatabaseName "DB-VS-Project"
:setvar DefaultFilePrefix "DB-VS-Project"
:setvar DefaultDataPath "C:\Users\eve\AppData\Local\Microsoft\VisualStudio\SSDT\DB-VS-Project"
:setvar DefaultLogPath "C:\Users\eve\AppData\Local\Microsoft\VisualStudio\SSDT\DB-VS-Project"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 936893b6-03ed-4d07-ab6e-0b5bb9d3cc1b is skipped, element [dbo].[Employee].[Id] (SqlSimpleColumn) will not be renamed to StaffId';


GO
PRINT N'Rename refactoring operation with key 8e47e779-f092-4897-96ef-accf7683eb1e is skipped, element [dbo].[Office].[Id] (SqlSimpleColumn) will not be renamed to LocCode';


GO
PRINT N'Rename refactoring operation with key bc5f1e5d-4960-4fe3-9370-c8d5ab448588 is skipped, element [dbo].[Assignment].[Id] (SqlSimpleColumn) will not be renamed to DateAssigned';


GO
PRINT N'Dropping Check Constraint [dbo].[CK_Grades]...';


GO
ALTER TABLE [dbo].[Enrolment] DROP CONSTRAINT [CK_Grades];


GO
PRINT N'Creating Table [dbo].[Assignment]...';


GO
CREATE TABLE [dbo].[Assignment] (
    [DateAssigned] INT NOT NULL,
    [StaffId]      INT NOT NULL,
    [LocCode]      INT NOT NULL,
    PRIMARY KEY CLUSTERED ([DateAssigned] ASC, [StaffId] ASC, [LocCode] ASC)
);


GO
PRINT N'Creating Table [dbo].[Employee]...';


GO
CREATE TABLE [dbo].[Employee] (
    [StaffId]   INT        NOT NULL,
    [GivenName] NCHAR (50) NULL,
    [Surname]   NCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([StaffId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Office]...';


GO
CREATE TABLE [dbo].[Office] (
    [LocCode]     INT         NOT NULL,
    [Address]     NCHAR (100) NULL,
    [Description] NCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([LocCode] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Assignment]...';


GO
ALTER TABLE [dbo].[Assignment] WITH NOCHECK
    ADD FOREIGN KEY ([StaffId]) REFERENCES [dbo].[Employee] ([StaffId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Assignment]...';


GO
ALTER TABLE [dbo].[Assignment] WITH NOCHECK
    ADD FOREIGN KEY ([LocCode]) REFERENCES [dbo].[Office] ([LocCode]);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Grades]...';


GO
ALTER TABLE [dbo].[Enrolment] WITH NOCHECK
    ADD CONSTRAINT [CK_Grades] CHECK (Grade IN ('N', 'P', 'C'));


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '936893b6-03ed-4d07-ab6e-0b5bb9d3cc1b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('936893b6-03ed-4d07-ab6e-0b5bb9d3cc1b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e47e779-f092-4897-96ef-accf7683eb1e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e47e779-f092-4897-96ef-accf7683eb1e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bc5f1e5d-4960-4fe3-9370-c8d5ab448588')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bc5f1e5d-4960-4fe3-9370-c8d5ab448588')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF ('$@DeployTestData' = 'true')

BEGIN

    INSERT INTO STUDENT VALUES 
    (1, 'Forst', 'List'),
    (2, 'Farst', 'Lest'),
    (3, 'First', 'Last')


END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Enrolment] WITH CHECK CHECK CONSTRAINT [CK_Grades];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Assignment'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
